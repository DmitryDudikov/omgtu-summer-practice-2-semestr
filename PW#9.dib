#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №9. Реализация длительных операций.

**Цель:** Предоставить возможность выполннеия команд, для полного завершения которых требуется более одного вызова Execute.

**Результаты:** После выполнения работы Вы сможете:
1. Выполнять длительные опреации в отдельном потоке без монопольного использования потока в течение длительного времени.
3. Прерывать выполнение таких команд. 


## Задание.
Если для полного выполнения командв потребуется более одного вызова Execute, необходимо такую команду добавить в планировщик.

Для иллюстрации выполнненой работы определить команду

#!csharp

using System;
using System.Collections.Concurrent;
using System.Threading;

interface ICommand
{
    void Execute();
}


public class TestCommand(int id) : ICommand
{ 
    int counter = 0;

    public void Execute()
    {
        Console.WriteLine($"Поток {id} вызов {++counter}");
    }
}

#!csharp

public class CommandScheduler
{
    private List<TestCommand> commands = new List<TestCommand>();
    private CancellationTokenSource cts = new CancellationTokenSource();

    public void ScheduleCommand(TestCommand command)
    {
        commands.Add(command);
    }

    public async Task ExecuteCommandsAsync(int numberOfExecutions)
    {
        for (int i = 0; i < numberOfExecutions; i++)
        {
            foreach (var command in commands)
            {
                command.Execute();
            }
        }
    }

    public void HardStop()
    {
        cts.Cancel();
    }
}

#!csharp

 CommandScheduler scheduler = new CommandScheduler();

        // Adding 5 instances of TestCommand
        for (int i = 0; i < 5; i++)
        {
            scheduler.ScheduleCommand(new TestCommand(i));
        }

        //Executing the commands 3 times
        
        await scheduler.ExecuteCommandsAsync(3);
        

        // Stopping the execution
        scheduler.HardStop();

        Console.WriteLine("Execution stopped.");
    

#!markdown

Необходимо проиллюстрировать выполнение 5 экземпляров TestCommand 3 раза, затем остановить поток с помощью HardStop.
